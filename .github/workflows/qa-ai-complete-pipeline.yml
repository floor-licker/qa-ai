name: QA AI - Complete Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  qalia-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Setup and Checkout
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # 2. Deploy Application for Testing
    - name: Install App Dependencies
      run: |
        npm install
        npm run build
        
    - name: Start Application in Docker
      run: |
        # Build and start your application
        docker build -t test-app .
        docker run -d -p 3000:3000 --name test-app test-app
        
        # Wait for application to be ready
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        echo "Application is ready at http://localhost:3000"

    # 3. Install QA AI Dependencies
    - name: Install QA AI Dependencies
      run: |
        cd qalia
        pip install -r requirements.txt
        playwright install chromium

    # 4. Run QA AI Exploration & Test Generation
    - name: Run QA AI Complete Pipeline
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        cd qalia
        python main.py http://localhost:3000 \
          --headless \
          --max-depth 5 \
          --timeout 600 \
          --output-dir ../generated_tests

    # 5. Execute Generated Playwright Tests
    - name: Run Playwright Tests
      run: |
        cd generated_tests/playwright
        npm install
        npx playwright install chromium
        npx playwright test --reporter=html

    # 6. Execute Generated Cypress Tests
    - name: Run Cypress Tests
      run: |
        cd generated_tests/cypress
        npm install
        npx cypress install
        npx cypress run --browser chrome

    # 7. Execute Generated Jest Tests
    - name: Run Jest Tests
      run: |
        cd generated_tests/jest
        npm install
        npm test

    # 8. Upload Test Results
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: generated_tests/playwright/playwright-report/

    - name: Upload Cypress Videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: generated_tests/cypress/cypress/videos/

    - name: Upload QA AI Session Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: qalia-session
        path: qalia/exploration_sessions/

    # 9. Comment on PR with Results
    - name: Comment Test Results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read QA AI summary
          const summaryPath = 'generated_tests/generation_summary.json';
          if (fs.existsSync(summaryPath)) {
            const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
            
            const comment = `
            ## üß™ QA AI Test Results
            
            ### üîç Exploration Summary
            - **Test Cases Generated**: ${summary.generation_summary.total_test_cases}
            - **Test Suites**: ${summary.generation_summary.total_test_suites}
            - **User Journeys**: ${summary.generation_summary.total_journeys_analyzed}
            
            ### üìä Test Breakdown
            - **Critical**: ${summary.test_breakdown.by_priority.critical || 0}
            - **High**: ${summary.test_breakdown.by_priority.high || 0}
            - **Medium**: ${summary.test_breakdown.by_priority.medium || 0}
            
            ### üéØ Framework Results
            - ‚úÖ Playwright Tests: Completed
            - ‚úÖ Cypress Tests: Completed  
            - ‚úÖ Jest Tests: Completed
            
            [View detailed reports in artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

    # 10. Cleanup
    - name: Cleanup
      if: always()
      run: |
        docker stop test-app || true
        docker rm test-app || true 